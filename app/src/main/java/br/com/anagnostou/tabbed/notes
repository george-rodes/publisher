__________________________________________________________

  <LinearLayout
          android:layout_below="@+id/atividades_toolbar"
          android:id="@+id/llTop"
          android:layout_width="match_parent"
          android:layout_height="wrap_content"
          android:orientation="horizontal"
          android:padding="5dp">

  <ImageButton
              android:layout_width="40sp"
              android:layout_height="40sp"
              android:layout_gravity="center_vertical"
              android:layout_marginRight="4sp"
              android:background="@drawable/seta"
              android:onClick="returnMainActivity"
              android:src="@drawable/ic_navigate_before_white_24dp" />

          <TextView
              android:id="@+id/tvNomePublicador"
              android:background="@drawable/seta"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:layout_gravity="center_vertical"
              android:gravity="center_vertical"
              android:text="Nome do Publicador"
              android:onClick="returnMainActivity"
              android:textColor="#FFF"
              android:textSize="25sp" />

      </LinearLayout>


__________________________________________________________
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="colorPrimary">#795548</color>
    <color name="colorPrimaryDark">#5D4037</color>
    <color name="colorAccent">#FF4081</color>
    <color name="pressed_color">#EFEBE9</color>
    <color name="depressed_color">#FFF</color>


</resources>

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="colorPrimary">#3f51b5</color>
    <color name="colorPrimaryDark">#303f9f</color>
    <color name="colorAccent">#FF4081</color>
    <color name="pressed_color">#8b9afd</color>
    <color name="depressed_color">#d3e9fd</color>


</resources>


______

<item
            android:id="@+id/anciaos"
            android:icon="@drawable/ic_menu_slideshow"
            android:title="Slideshow" />
        <item
            android:id="@+id/nav_manage"
            android:icon="@drawable/ic_menu_manage"
            android:title="Tools" />


  <item android:title="Communicate">
        <menu>
            <item
                android:id="@+id/nav_share"
                android:icon="@drawable/ic_menu_share"
                android:title="Share" />
            <item
                android:id="@+id/nav_send"
                android:icon="@drawable/ic_menu_send"
                android:title="Send" />
        </menu>
    </item>

_______________________________________________________________________________________

android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
_____________________________________________________________________________________________

public void dialPhoneNumber(String phoneNumber) {
        Intent intent = new Intent(Intent.ACTION_DIAL);
        intent.setData(Uri.parse("tel:" + phoneNumber));
        if (intent.resolveActivity(getPackageManager()) != null) {
            startActivity(intent);
        }
    }
______________________________________________________________________________________________

#303f9f
#3f51b5

android:centerColor="@color/colorPrimary"
_____________________________________________________________________________________________
 public static class PlaceholderFragment extends Fragment {
        /** The fragment argument representing the section number for this fragment. **/
        private static final String ARG_SECTION_NUMBER = "section_number";

        public PlaceholderFragment() {
        }

        /** Returns a new instance of this fragment for the given section number. **/
        public static PlaceholderFragment newInstance(int sectionNumber) {
            L.m("PlaceholderFragment newInstance: " + sectionNumber);
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            L.m("static class PlaceholderFragment on CreateView");
            View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            TextView textView = (TextView) rootView.findViewById(R.id.section_label);
            //textView.setText(getString(R.string.section_format, getArguments().getInt(ARG_SECTION_NUMBER)));
            textView.setText(getString(R.string.section_format));
            return rootView;
        }
    }
_____________________________________________________________________________________________
2016.08.10.20.34
Fragment:
@Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        rootView =  inflater.inflate(R.layout.fragment_adriano, container, false);
        adrianoListView = (ListView) rootView.findViewById(R.id.adrianoListView);


        dbAdapter = new DBAdapter(rootView.getContext());
        sqLiteDatabase = dbAdapter.mydbHelper.getWritableDatabase();
        cursor = dbAdapter.cursorPublicadorPorGrupo("Adriano");

        if (cursor.getCount() > 0) {
            CursorAdapter listAdapter =

                    new SimpleCursorAdapter(rootView.getContext(), R.layout.row,
                            cursor, new String[]{"nome"},new int[]{R.id.nameTextView}, 0);

            adrianoListView.setAdapter(listAdapter);
            //cursor.moveToFirst();
        }

        adrianoListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position,
                                    long id) {
                cursor.moveToPosition(position);
                L.m(cursor.getString(cursor.getColumnIndex("nome")));
                //Intent intent = new Intent(ThisActivity.this, NextActivity.class);
                //intent.putExtra("chosen", position);
                //startActivity(intent);
            }
        });





        new SimpleCursorAdapter(rootView.getContext(), android.R.layout.simple_list_item_1,
                            cursor, new String[]{"nome"},new int[]{android.R.id.text1}, 0);


2016.08.10.13.52

        <TextView
            android:id="@+id/adriano_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" />

        <TextView
            android:text="Hello I am the Adriano Fragemnt"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" />




/**
     * The {@link android.support.v4.view.PagerAdapter} that will provide
     * fragments for each of the sections. We use a
     * {@link FragmentPagerAdapter} derivative, which will keep every
     * loaded fragment in memory. If this becomes too memory intensive, it
     * may be best to switch to a
     * {@link android.support.v4.app.FragmentStatePagerAdapter}.
     */



 activity_main.xml:
//UGLY
        <android.support.v4.view.PagerTitleStrip
            android:layout_height="wrap_content"
            android:layout_width="wrap_content"
            android:background="@color/colorPrimary"
            android:foreground="#FFF">
        </android.support.v4.view.PagerTitleStrip>


  <android.support.design.widget.FloatingActionButton
         android:id="@+id/fab"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_gravity="end|bottom"
         android:layout_margin="@dimen/fab_margin"
         android:src="@android:drawable/ic_dialog_email" />

 MainActivity onCreate:
 FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });

______________________________________________________________________________________________
2016.08.10.11.54
android:theme="@style/AppTheme"

 <activity
            android:name=".MainActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>



__________________________________________________________________________________
2016.08.07
//Before Singleton
public DBHelper(Context context) {
            super(context, DB_NAME, null, DB_VERSION);
            //L.m("dbAdapter Constructor called");
            this.context = context;
        }

Date today = Calendar.getInstance().getTime();
        Calendar mMoment = new GregorianCalendar();
        mMoment.setTime(today);
        //L.m(Calc.comparaData("02/08/2016"));
        Date data;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        try {
            data = sdf.parse("02/08/2016 10:22");
            L.m("SDF parse: " + data.toString());
        } catch (ParseException e) {
            e.printStackTrace();
        }

L.t(this, Calendar.getInstance().toString());

java.util.GregorianCalendar[
time=1470166842672,
areFieldsSet=true,
lenient=true,
zone=America/Sao_Paulo,
firstDayOfWeek=1,
minimalDaysInFirstWeek=1,
ERA=1,
YEAR=2016,
MONTH=7,
WEEK_OF_YEAR=32,
WEEK_OF_MONTH=1,
DAY_OF_MONTH=2,
DAY_OF_YEAR=215,
DAY_OF_WEEK=3,
DAY_OF_WEEK_IN_MONTH=1,
AM_PM=1,
HOUR=4,
HOUR_OF_DAY=16,
MINUTE=40,
SECOND=42,
MILLISECOND=672,
ZONE_OFFSET=-10800000,
DST_OFFSET=0]




Main Screen
Spinner with names
on change

Contact details
Last Six months average
Call button

<>
<LinearLayout
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/LLabd3"
    android:layout_below="@id/LLabd2"
    android:layout_marginTop="10dp"
    android:background="#002858">

    <Button
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Selecionar Todos  Publicador"
        android:id="@+id/btnSelectallPublicador"
        android:onClick="selectAllPublicador" />

    <Button
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Selecionar Todos  Relatorio"
        android:id="@+id/btnSelectAllRelatorio"
        android:onClick="selectAllRelatorio" />
</LinearLayout>
</>


public String selectAllRelatorio() {
        SQLiteDatabase db = mydbHelper.getWritableDatabase();
        String[] columns = {DBHelper.UID, DBHelper.ANO, DBHelper.MES, DBHelper.NOME, DBHelper.HORAS};
        Cursor cursor = db.query(DBHelper.TABLE_NAME_RELATORIO, columns, null, null, null, null, null, "99");
        StringBuilder sb = new StringBuilder();

        //check cursor
        if (cursor.getCount() > 0) {
            while (cursor.moveToNext()) {
                int ano = cursor.getInt(cursor.getColumnIndex(DBHelper.ANO));
                int mes = cursor.getInt(cursor.getColumnIndex(DBHelper.MES));
                int horas = cursor.getInt(cursor.getColumnIndex(DBHelper.HORAS));
                String nome = cursor.getString(cursor.getColumnIndex(DBHelper.NOME));
                sb.append(ano + " " + mes + " " + nome + " " + horas + "\n");
            }
        } else sb.append("No Records");
        return sb.toString();
    }




    /*
        A good way to organize a contract class is to put definitions that are global
        to your whole database in the root level of the class.
        Then create an inner class for each table that enumerates its columns.

     */

        /*
        A more concise way of checking whether a network interface is available is as follows.
        The method getActiveNetworkInfo() returns a NetworkInfo instance representing
        the first connected network interface it can find,
        or null if none of the interfaces is connected
        (meaning that an internet connection is not available):

         */


/*
int oldVersion = sqLiteDatabase.getVersion();
int newVersion = oldVersion + 1;

 */

   fos = "/sdcard/cadastro.txt";
         downloadingFileName = "Cadastro";
         final DownloadTask downloadPublicadorTask = new DownloadTask(getApplicationContext());
         downloadPublicadorTask.execute("http://www.anagnostou.com.br/overseer/cadastro.txt");

         fos = "/sdcard/relatorio.txt";
         downloadingFileName = "Relatorio";
         final DownloadTask downloadRelatorioTask = new DownloadTask(getApplicationContext());
         downloadRelatorioTask.execute("http://www.anagnostou.com.br/overseer/relatorio.txt");

         fos = "/sdcard/update.txt";
         downloadingFileName = "versao";
         final DownloadTask downloadVersaoTask = new DownloadTask(getApplicationContext());
         downloadVersaoTask.execute("http://www.anagnostou.com.br/overseer/update.txt");